# Python Simplified Grammar (No raise or try, tuples included)

program: (stmt NEWLINE)* ENDMARKER

# === STATEMENTS ===

stmt: simple_stmt | compound_stmt

simple_stmt: small_stmt (';' small_stmt)* [';']
small_stmt: expr_stmt
          | flow_stmt
          | pass_stmt
          | break_stmt
          | continue_stmt
          | import_stmt
          | function_call_stmt

compound_stmt: if_stmt
             | while_stmt
             | for_stmt
             | funcdef
             | class_def

# === SIMPLE STATEMENTS ===

pass_stmt: 'pass'
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [test]

import_stmt: 'import' dotted_name ('as' NAME)? (',' dotted_name ('as' NAME)?)*
           | 'from' dotted_name 'import' (NAME ('as' NAME)? | '*')

dotted_name: NAME ('.' NAME)*

expr_stmt: identifier_list assign_op expression_list
identifier_list: NAME (',' NAME)*
expression_list: test (',' test)*

assign_op: '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '//='

function_call_stmt: NAME '(' [arglist] ')' | dotted_name '(' [arglist] ')'
arglist: test (',' test)* [',']

# === COMPOUND STATEMENTS ===

if_stmt: 'if' test ':' suite
          ('elif' test ':' suite)*
          ['else' ':' suite]

while_stmt: 'while' test ':' suite

for_stmt: 'for' NAME 'in' test ':' suite

funcdef: 'def' NAME parameters ':' suite
parameters: '(' [typedargslist] ')'
typedargslist: NAME (',' NAME)*

class_def: 'class' NAME ['(' NAME ')'] ':' suite

suite: simple_stmt
     | NEWLINE INDENT stmt+ DEDENT

# === EXPRESSIONS ===

test: or_test
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison

comparison: arith_expr (comp_op arith_expr)*
comp_op: '<' | '>' | '==' | '>=' | '<=' | '!='

arith_expr: term (('+' | '-') term)*
term: factor (('*' | '/' | '//') factor)*

factor: ('+' | '-' | '~') factor
      | atom_expr
      | atom

atom_expr: atom trailer*
trailer: '(' [arglist] ')'

# === ATOMS ===

atom: '(' [testlist] ')'            
    | '[' [testlist] ']'            
    | '{' [dict_entries] '}'        
    | NAME
    | NUMBER
    | STRING
    | 'None' | 'True' | 'False'

testlist: test (',' test)* [',']
dict_entries: (test ':' test) (',' test ':' test)* [',']

# === LITERALS ===

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /[0-9]+(\.[0-9]+)?/
STRING: /'(\\.|[^'])*'|"(\\.|[^"])*"/
NEWLINE: /(\r?\n)+/
INDENT: '<INDENT>'
DEDENT: '<DEDENT>'
ENDMARKER: '<EOF>'